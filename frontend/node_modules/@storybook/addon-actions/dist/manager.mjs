import { ADDON_ID, PANEL_ID, PARAM_KEY, CLEAR_ID, EVENT_ID } from './chunk-VWCVBQ22.mjs';
import React, { Component, Fragment } from 'react';
import { addons, types, useAddonState, useChannel } from '@storybook/manager-api';
import { STORY_CHANGED } from '@storybook/core-events';
import { ScrollArea, Spaced, Badge, ActionBar } from '@storybook/components';
import { dequal } from 'dequal';
import { styled, withTheme } from '@storybook/theming';
import { Inspector } from 'react-inspector';
import { opacify } from 'polished';

var Action=styled.div({display:"flex",padding:0,borderLeft:"5px solid transparent",borderBottom:"1px solid transparent",transition:"all 0.1s",alignItems:"flex-start",whiteSpace:"pre"}),Counter=styled.div(({theme})=>({backgroundColor:opacify(.5,theme.appBorderColor),color:theme.color.inverseText,fontSize:theme.typography.size.s1,fontWeight:theme.typography.weight.bold,lineHeight:1,padding:"1px 5px",borderRadius:20,margin:"2px 0px"})),InspectorContainer=styled.div({flex:1,padding:"0 0 0 5px"});var UnstyledWrapped=({children,className})=>React.createElement(ScrollArea,{horizontal:!0,vertical:!0,className},children),Wrapper=styled(UnstyledWrapped)({margin:0,padding:"10px 5px 20px"}),ThemedInspector=withTheme(({theme,...props})=>React.createElement(Inspector,{theme:theme.addonActionsTheme||"chromeLight",table:!1,...props})),ActionLogger=({actions,onClear})=>React.createElement(Fragment,null,React.createElement(Wrapper,null,actions.map(action=>React.createElement(Action,{key:action.id},action.count>1&&React.createElement(Counter,null,action.count),React.createElement(InspectorContainer,null,React.createElement(ThemedInspector,{sortObjectKeys:!0,showNonenumerable:!1,name:action.data.name,data:action.data.args||action.data}))))),React.createElement(ActionBar,{actionItems:[{title:"Clear",onClick:onClear}]}));var safeDeepEqual=(a,b)=>{try{return dequal(a,b)}catch{return !1}},ActionLogger2=class extends Component{constructor(props){super(props);this.handleStoryChange=()=>{let{actions}=this.state;actions.length>0&&actions[0].options.clearOnStoryChange&&this.clearActions();};this.addAction=action=>{this.setState(prevState=>{let actions=[...prevState.actions],previous=actions.length&&actions[0];return previous&&safeDeepEqual(previous.data,action.data)?previous.count++:(action.count=1,actions.unshift(action)),{actions:actions.slice(0,action.options.limit)}});};this.clearActions=()=>{let{api}=this.props;api.emit(CLEAR_ID),this.setState({actions:[]});};this.mounted=!1,this.state={actions:[]};}componentDidMount(){this.mounted=!0;let{api}=this.props;api.on(EVENT_ID,this.addAction),api.on(STORY_CHANGED,this.handleStoryChange);}componentWillUnmount(){this.mounted=!1;let{api}=this.props;api.off(STORY_CHANGED,this.handleStoryChange),api.off(EVENT_ID,this.addAction);}render(){let{actions=[]}=this.state,{active}=this.props,props={actions,onClear:this.clearActions};return active?React.createElement(ActionLogger,{...props}):null}};function Title(){let[{count},setCount]=useAddonState(ADDON_ID,{count:0});return useChannel({[EVENT_ID]:()=>{setCount(c=>({...c,count:c.count+1}));},[STORY_CHANGED]:()=>{setCount(c=>({...c,count:0}));},[CLEAR_ID]:()=>{setCount(c=>({...c,count:0}));}}),React.createElement("div",null,React.createElement(Spaced,{col:1},React.createElement("span",{style:{display:"inline-block",verticalAlign:"middle"}},"Actions"),count===0?"":React.createElement(Badge,{status:"neutral"},count)))}addons.register(ADDON_ID,api=>{addons.add(PANEL_ID,{title:Title,type:types.PANEL,render:({active})=>React.createElement(ActionLogger2,{api,active:!!active}),paramKey:PARAM_KEY});});
