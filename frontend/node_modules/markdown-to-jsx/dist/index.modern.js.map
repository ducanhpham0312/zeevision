{"version":3,"file":"index.modern.js","sources":["../index.tsx"],"sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. üôèüèº\n */\nimport * as React from 'react'\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    _inAnchor?: boolean\n    _inline?: boolean\n    _inTable?: boolean\n    _key?: React.Key\n    _list?: boolean\n    _simple?: boolean\n  }\n\n  export type ParserResult = {\n    [key: string]: any\n    type?: string\n  }\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult,\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    _match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    _order: Priority\n    _parse: MarkdownToJSX.Parser<ParserOutput>\n    _react?: (\n      node: ParserOutput,\n      output: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [key: string]: Rule\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: JSX.IntrinsicAttributes,\n      ...children: React.ReactChild[]\n    ) => JSX.Element\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n  }>\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'className',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ‚Ü≥ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ‚Üì                ‚Ü≥ disabled: true\n *                     ‚Ü≥ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ‚Ü≥ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)?([^\\n]*?)?\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)*\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/ig\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\nconst TEXT_BOLD_R =\n  /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R =\n  /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/\nconst TEXT_MARKED_R = /^==((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)==/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&#;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^\\\\])/g\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(h: any, type: LIST_TYPE) {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    _match(source, state, prevCapture) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n      const isListBlock = state._list || (!state._inline && !state._simple)\n\n      if (isStartOfLine && isListBlock) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    },\n    _order: Priority.HIGH,\n    _parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for restoration afterwards. We're going to\n        // want to set state._list to true, and state._inline depending\n        // on our list's looseness.\n        const oldStateInline = state._inline\n        const oldStateList = state._list\n        state._list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state._inline = false\n          adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n        } else {\n          state._inline = true\n          adjustedContent = content.replace(LIST_ITEM_END_R, '')\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state._inline = oldStateInline\n        state._list = oldStateList\n\n        return result\n      })\n\n      return {\n        _items: itemContent,\n        _ordered: ordered,\n        _start: start,\n      }\n    },\n    _react(node, output, state) {\n      const Tag = node._ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag key={state._key} start={node._start}>\n          {node._items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  } as MarkdownToJSX.Rule<{\n    _items: MarkdownToJSX.ParserResult[]\n    _ordered: boolean\n    _start?: number\n  }>\n}\n\nconst LINK_R = /^\\[([^\\]]*)]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\nconst IMAGE_R = /^!\\[([^\\]]*)]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_FENCED_R,\n  CODE_BLOCK_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HEADING_ATX_COMPLIANT_R,\n  HTML_COMMENT_R,\n  NP_TABLE_R,\n  ORDERED_LIST_ITEM_R,\n  ORDERED_LIST_R,\n  UNORDERED_LIST_ITEM_R,\n  UNORDERED_LIST_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[√Ä√Å√Ç√É√Ñ√Ö√†√°√¢√£√§√•√¶√Ü]/g, 'a')\n    .replace(/[√ß√á]/g, 'c')\n    .replace(/[√∞√ê]/g, 'd')\n    .replace(/[√à√â√ä√ã√©√®√™√´]/g, 'e')\n    .replace(/[√è√Ø√é√Æ√ç√≠√å√¨]/g, 'i')\n    .replace(/[√ë√±]/g, 'n')\n    .replace(/[√∏√ò≈ì≈í√ï√µ√î√¥√ì√≥√í√≤]/g, 'o')\n    .replace(/[√ú√º√õ√ª√ö√∫√ô√π]/g, 'u')\n    .replace(/[≈∏√ø√ù√Ω]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const prevInTable = state._inTable\n  state._inTable = true\n  const tableRow = parse(source.trim(), state)\n  state._inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === 'text' &&\n        (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')\n      ) {\n        node._content = node._content.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  state._inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state._inline = false\n\n  return {\n    _align: align,\n    _cells: cells,\n    _header: header,\n    type: 'table',\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node._align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node._align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type]._order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA]._order\n    let orderB = rules[typeB]._order\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule._match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule._parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state._inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(\n  source: string,\n  state: MarkdownToJSX.State,\n  prevCapturedString?: string\n) {\n  if (state._inline || state._simple) {\n    return null\n  }\n\n  if (prevCapturedString && !prevCapturedString.endsWith('\\n')) {\n    // don't match continuation of a line\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state._key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state._key = i\n\n        const nodeOut = nestedReactOutput(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state._key = oldKey\n\n      return result\n    }\n\n    return outputFunc(ast, nestedReactOutput, state)\n  }\n}\n\nfunction sanitizeUrl(url: string): string | undefined {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return undefined\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = true\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = false\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  content,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  state._inline = false\n  return parse(content, state)\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<\n  ReturnType<typeof parseInline>\n> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    _content: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction ruleOutput(rules: MarkdownToJSX.Rules) {\n  return function nestedRuleOutput(\n    ast: MarkdownToJSX.ParserResult,\n    outputFunc: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    return rules[ast.type]._react(ast, outputFunc, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nenum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\nexport function compiler(\n  markdown: string,\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let _inline = false\n\n    if (options.forceInline) {\n      _inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      _inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        _inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          _inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (_inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string): JSX.IntrinsicAttributes {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw, index) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          key,\n          value\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = React.cloneElement(compile(normalizedValue.trim()), {\n            key: index,\n          })\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { _footnote: string; _identifier: string }[] = []\n  const refs: { [key: string]: { _target: string; _title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules: MarkdownToJSX.Rules = {\n    blockQuote: {\n      _match: blockRegex(BLOCKQUOTE_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          _content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <blockquote key={state._key}>\n            {output(node._content, state)}\n          </blockquote>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _content: MarkdownToJSX.ParserResult }>,\n\n    breakLine: {\n      _match: anyScopeRegex(BREAK_LINE_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <br key={state._key} />\n      },\n    },\n\n    breakThematic: {\n      _match: blockRegex(BREAK_THEMATIC_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <hr key={state._key} />\n      },\n    },\n\n    codeBlock: {\n      _match: blockRegex(CODE_BLOCK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n          _lang: undefined,\n        }\n      },\n\n      _react(node, output, state) {\n        return (\n          <pre key={state._key}>\n            <code\n              {...node._attrs}\n              className={node._lang ? `lang-${node._lang}` : ''}\n            >\n              {node._content}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _attrs?: ReturnType<typeof attrStringToMap>\n      _content: string\n      _lang?: string\n    }>,\n\n    codeFenced: {\n      _match: blockRegex(CODE_BLOCK_FENCED_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          _attrs: attrStringToMap(capture[3] || ''),\n          _content: capture[4],\n          _lang: capture[2] || undefined,\n          type: 'codeBlock',\n        }\n      },\n    },\n\n    codeInline: {\n      _match: simpleInlineRegex(CODE_INLINE_R),\n      _order: Priority.LOW,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return <code key={state._key}>{node._content}</code>\n      },\n    } as MarkdownToJSX.Rule<{ _content: string }>,\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      _match: blockRegex(FOOTNOTE_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        footnotes.push({\n          _footnote: capture[2],\n          _identifier: capture[1],\n        })\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    footnoteReference: {\n      _match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse*/) {\n        return {\n          _content: capture[1],\n          _target: `#${options.slugify(capture[1])}`,\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a key={state._key} href={sanitizeUrl(node._target)}>\n            <sup key={state._key}>{node._content}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _content: string; _target: string }>,\n\n    gfmTask: {\n      _match: inlineRegex(GFM_TASK_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <input\n            checked={node._completed}\n            key={state._key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _completed: boolean }>,\n\n    heading: {\n      _match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          _content: parseInline(parse, capture[2], state),\n          _id: options.slugify(capture[2]),\n          _level: capture[1].length,\n        }\n      },\n      _react(node, output, state) {\n        return h(\n          `h${node._level}`,\n          { id: node._id, key: state._key },\n          output(node._content, state)\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _content: MarkdownToJSX.ParserResult\n      _id: string\n      _level: 1 | 2 | 3 | 4 | 5 | 6\n      _tag: MarkdownToJSX.HTMLTags\n    }>,\n\n    headingSetext: {\n      _match: blockRegex(HEADING_SETEXT_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          _content: parseInline(parse, capture[1], state),\n          _level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        }\n      },\n    },\n\n    htmlComment: {\n      _match: anyScopeRegex(HTML_COMMENT_R),\n      _order: Priority.HIGH,\n      _parse() {\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    image: {\n      _match: simpleInlineRegex(IMAGE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _alt: capture[1],\n          _target: unescapeUrl(capture[2]),\n          _title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node._alt || undefined}\n            title={node._title || undefined}\n            src={sanitizeUrl(node._target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _alt?: string\n      _target: string\n      _title?: string\n    }>,\n\n    link: {\n      _match: inlineRegex(LINK_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          _content: parseSimpleInline(parse, capture[1], state),\n          _target: unescapeUrl(capture[2]),\n          _title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a\n            key={state._key}\n            href={sanitizeUrl(node._target)}\n            title={node._title}\n          >\n            {output(node._content, state)}\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _content: MarkdownToJSX.ParserResult\n      _target: string\n      _title?: string\n    }>,\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: [\n            {\n              _content: capture[1],\n              type: 'text',\n            },\n          ],\n          _target: capture[1],\n          type: 'link',\n        }\n      },\n    },\n\n    linkBareUrlDetector: {\n      _match: (source, state) => {\n        if (state._inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: [\n            {\n              _content: capture[1],\n              type: 'text',\n            },\n          ],\n          _target: capture[1],\n          _title: undefined,\n          type: 'link',\n        }\n      },\n    },\n\n    linkMailtoDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          _content: [\n            {\n              _content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          _target: target,\n          type: 'link',\n        }\n      },\n    },\n\n    orderedList: generateListRule(h, ORDERED),\n    unorderedList: generateListRule(h, UNORDERED),\n\n    newlineCoalescer: {\n      _match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      _order: Priority.LOW,\n      _parse: captureNothing,\n      _react(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    paragraph: {\n      _match: matchParagraph,\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <p key={state._key}>{output(node._content, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ref: {\n      _match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      _order: Priority.MAX,\n      _parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          _target: capture[2],\n          _title: capture[4],\n        }\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    refImage: {\n      _match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      _order: Priority.MAX,\n      _parse(capture) {\n        return {\n          _alt: capture[1] || undefined,\n          _ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node._alt}\n            src={sanitizeUrl(refs[node._ref]._target)}\n            title={refs[node._ref]._title}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _alt?: string; _ref: string }>,\n\n    refLink: {\n      _match: inlineRegex(REFERENCE_LINK_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          _content: parse(capture[1], state),\n          _fallbackContent: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          _ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return refs[node._ref] ? (\n          <a\n            key={state._key}\n            href={sanitizeUrl(refs[node._ref]._target)}\n            title={refs[node._ref]._title}\n          >\n            {output(node._content, state)}\n          </a>\n        ) : (\n          <span key={state._key}>{output(node._fallbackContent, state)}</span>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _content: MarkdownToJSX.ParserResult\n      _fallbackContent: MarkdownToJSX.ParserResult\n      _ref: string\n    }>,\n\n    table: {\n      _match: blockRegex(NP_TABLE_R),\n      _order: Priority.HIGH,\n      _parse: parseTable,\n      _react(node, output, state) {\n        return (\n          <table key={state._key}>\n            <thead>\n              <tr>\n                {node._header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node._cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseTable>>,\n\n    tableSeparator: {\n      _match: function (source, state) {\n        if (!state._inTable) {\n          return null\n        }\n        state._inline = true\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      _order: Priority.HIGH,\n      _parse: function () {\n        return { type: 'tableSeparator' }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      _react() {\n        return ' | '\n      },\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      _match: anyScopeRegex(TEXT_PLAIN_R),\n      _order: Priority.MIN,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      _react(node /*, output, state*/) {\n        return node._content\n      },\n    } as MarkdownToJSX.Rule<{ _content: string }>,\n\n    textBolded: {\n      _match: simpleInlineRegex(TEXT_BOLD_R),\n      _order: Priority.MED,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          _content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <strong key={state._key}>{output(node._content, state)}</strong>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEmphasized: {\n      _match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          _content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <em key={state._key}>{output(node._content, state)}</em>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      _match: simpleInlineRegex(TEXT_ESCAPED_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[1],\n          type: 'text',\n        }\n      },\n    },\n\n    textMarked: {\n      _match: simpleInlineRegex(TEXT_MARKED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <mark key={state._key}>{output(node._content, state)}</mark>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    textStrikethroughed: {\n      _match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <del key={state._key}>{output(node._content, state)}</del>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { _match: match, _parse: parse } = rules[key]\n\n  //   rules[key]._match = (...args) => {\n  //     const start = performance.now()\n  //     const result = match(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(\n  //         `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n\n  //     return result\n  //   }\n\n  //   rules[key]._parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`)\n\n  //     console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0])\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        state._inAnchor = state._inAnchor || tagName === 'a'\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        const content = noInnerParse\n          ? capture[3]\n          : parseFunc(parse, trimmed, state)\n\n        state._inAnchor = false\n\n        return {\n          _attrs: attrStringToMap(capture[2]),\n          _content: content,\n          _noInnerParse: noInnerParse,\n          _tag: noInnerParse ? tagName : capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          // @ts-ignore\n          <node._tag key={state._key} {...node._attrs}>\n            {node._noInnerParse\n              ? (node._content as string)\n              : output(node._content as MarkdownToJSX.ParserResult, state)}\n          </node._tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _attrs: ReturnType<typeof attrStringToMap>\n      _content: string | ReturnType<MarkdownToJSX.NestedParser>\n      _noInnerParse: Boolean\n      _tag: string\n    }>\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _attrs: attrStringToMap(capture[2] || ''),\n          _tag: capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return <node._tag {...node._attrs} key={state._key} />\n      },\n    } as MarkdownToJSX.Rule<{\n      _attrs: ReturnType<typeof attrStringToMap>\n      _tag: string\n    }>\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(ruleOutput(rules))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={options.slugify(def._identifier)} key={def._identifier}>\n                {def._identifier}\n                {emitter(parser(def._footnote, { _inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children, options, ...props }) => {\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error('markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:', children)\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as JSX.IntrinsicAttributes\n  )\n}\n\nexport default Markdown\n"],"names":["ATTRIBUTE_TO_JSX_PROP_MAP","reduce","obj","x","toLowerCase","for","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","GFM_TASK_R","HEADING_R","HEADING_ATX_COMPLIANT_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SQUARE_BRACKETS_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_SEPARATOR_R","TABLE_TRIM_PIPES","TABLE_CELL_END_TRIM","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","TEXT_BOLD_R","TEXT_EMPHASIZED_R","TEXT_MARKED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_STARTING_NEWLINES","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","ORDERED_LIST_BULLET","UNORDERED_LIST_BULLET","generateListItemPrefix","type","ORDERED_LIST_ITEM_PREFIX","UNORDERED_LIST_ITEM_PREFIX","generateListItemPrefixRegex","RegExp","ORDERED_LIST_ITEM_PREFIX_R","UNORDERED_LIST_ITEM_PREFIX_R","generateListItemRegex","ORDERED_LIST_ITEM_R","UNORDERED_LIST_ITEM_R","generateListRegex","bullet","ORDERED_LIST_R","UNORDERED_LIST_R","generateListRule","h","ordered","LIST_R","LIST_ITEM_R","LIST_ITEM_PREFIX_R","_match","source","state","prevCapture","isStartOfLine","exec","_list","_inline","_simple","_order","Priority","HIGH","_parse","capture","parse","start","undefined","items","replace","match","lastItemWasAParagraph","_items","map","item","i","space","length","spaceRegex","content","isLastItem","thisItemIsAParagraph","indexOf","oldStateInline","oldStateList","adjustedContent","result","_ordered","_start","_react","node","output","key","_key","LINK_R","IMAGE_R","NON_PARAGRAPH_BLOCK_SYNTAXES","BLOCK_SYNTAXES","slugify","str","parseTableAlignCapture","alignCapture","test","parseTableRow","prevInTable","_inTable","tableRow","trim","cells","forEach","push","_content","parseTable","header","align","split","rowText","parseTableCells","_align","_cells","_header","getTableStyle","colIndex","textAlign","inlineRegex","regex","simpleInlineRegex","blockRegex","anyScopeRegex","matchParagraph","prevCapturedString","endsWith","every","line","some","captured","trimEnd","sanitizeUrl","url","decodeURIComponent","e","unescapeUrl","rawUrlString","parseInline","isCurrentlyInline","isCurrentlySimple","parseSimpleInline","parseBlock","parseCaptureInline","captureNothing","renderNothing","cx","args","filter","Boolean","join","get","src","path","fb","ptr","frags","shift","compiler","markdown","options","overrides","_extends","createElementFn","createElement","React","tag","props","children","overrideProps","override","getTag","className","compile","input","forceInline","forceBlock","arr","emitter","parser","pop","wrapper","jsx","forceWrapper","attrStringToMap","attributes","raw","index","delimiterIdx","_","letter","toUpperCase","normalizeAttributeKey","slice","value","first","unquote","mappedKey","normalizedValue","styles","kvPair","substr","attributeValueToJSXPropValue","cloneElement","footnotes","refs","rules","blockQuote","breakLine","__","breakThematic","codeBlock","MAX","_lang","_attrs","codeFenced","codeInline","LOW","footnote","_footnote","_identifier","footnoteReference","_target","href","gfmTask","_completed","checked","readOnly","heading","enforceAtxHeadings","_id","_level","id","headingSetext","htmlComment","image","_alt","_title","alt","title","link","linkAngleBraceStyleDetector","linkBareUrlDetector","_inAnchor","linkMailtoDetector","address","target","orderedList","unorderedList","newlineCoalescer","paragraph","ref","refImage","_ref","refLink","_fallbackContent","table","style","row","c","tableSeparator","text","MIN","full","inner","textBolded","MED","textEmphasized","textEscaped","textMarked","textStrikethroughed","disableParsingRawHTML","htmlBlock","whitespace","trimmer","trimmed","parseFunc","r","tagName","noInnerParse","_noInnerParse","_tag","htmlSelfClosing","ruleList","Object","keys","nestedParse","ruleType","rule","currCaptureString","substring","parsed","sort","typeA","typeB","orderA","orderB","normalizeWhitespace","parserFor","outputFunc","ast","ruleOutput","nestedReactOutput","Array","isArray","oldKey","lastWasString","nodeOut","isString","def","_objectWithoutPropertiesLoose","_excluded"],"mappings":"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"}