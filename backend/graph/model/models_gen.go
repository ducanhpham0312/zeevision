// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Incident struct {
	IncidentKey  int64     `json:"incidentKey"`
	InstanceKey  int64     `json:"instanceKey"`
	ElementID    string    `json:"elementId"`
	ErrorType    string    `json:"errorType"`
	ErrorMessage string    `json:"errorMessage"`
	State        string    `json:"state"`
	Time         string    `json:"time"`
	Instance     *Instance `json:"instance"`
}

type Instance struct {
	BpmnLiveStatus string      `json:"bpmnLiveStatus"`
	StartTime      string      `json:"startTime"`
	EndTime        *string     `json:"endTime,omitempty"`
	InstanceKey    int64       `json:"instanceKey"`
	ProcessKey     int64       `json:"processKey"`
	Version        int64       `json:"version"`
	Status         Status      `json:"status"`
	Incidents      []*Incident `json:"incidents"`
	Jobs           []*Job      `json:"jobs"`
	Variables      []*Variable `json:"variables"`
	Process        *Process    `json:"process"`
}

type Job struct {
	ElementID   string    `json:"elementId"`
	InstanceKey int64     `json:"instanceKey"`
	Key         int64     `json:"key"`
	Type        string    `json:"type"`
	Retries     int64     `json:"retries"`
	Worker      string    `json:"worker"`
	State       string    `json:"state"`
	Time        string    `json:"time"`
	Instance    *Instance `json:"instance"`
}

type Pagination struct {
	Offset int64 `json:"offset"`
	Limit  int64 `json:"limit"`
}

type Process struct {
	ActiveInstances    int64       `json:"activeInstances"`
	CompletedInstances int64       `json:"completedInstances"`
	BpmnLiveStatus     string      `json:"bpmnLiveStatus"`
	BpmnResource       string      `json:"bpmnResource"`
	BpmnProcessID      string      `json:"bpmnProcessId"`
	DeploymentTime     string      `json:"deploymentTime"`
	Instances          []*Instance `json:"instances"`
	ProcessKey         int64       `json:"processKey"`
	Version            int64       `json:"version"`
}

type Variable struct {
	Name  string `json:"name"`
	Value string `json:"value"`
	Time  string `json:"time"`
}

type Status string

const (
	StatusActive     Status = "ACTIVE"
	StatusCompleted  Status = "COMPLETED"
	StatusTerminated Status = "TERMINATED"
)

var AllStatus = []Status{
	StatusActive,
	StatusCompleted,
	StatusTerminated,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusActive, StatusCompleted, StatusTerminated:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
