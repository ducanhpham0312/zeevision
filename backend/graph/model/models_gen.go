// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Instance struct {
	BpmnLiveStatus string `json:"bpmnLiveStatus"`
	BpmnResource   string `json:"bpmnResource"`
	StartTime      string `json:"startTime"`
	BpmnProcessID  string `json:"bpmnProcessId"`
	InstanceKey    int64  `json:"instanceKey"`
	Version        int64  `json:"version"`
	Status         Status `json:"status"`
}

type MessageSubscription struct {
	CreatedAt   string `json:"createdAt"`
	ElementID   int64  `json:"elementId"`
	MessageName string `json:"messageName"`
	Status      Status `json:"status"`
}

type Process struct {
	ActiveInstances      int64                  `json:"activeInstances"`
	CompletedInstances   int64                  `json:"completedInstances"`
	BpmnLiveStatus       string                 `json:"bpmnLiveStatus"`
	BpmnResource         string                 `json:"bpmnResource"`
	DeploymentTime       string                 `json:"deploymentTime"`
	Instances            []*Instance            `json:"instances"`
	MessageSubscriptions []*MessageSubscription `json:"messageSubscriptions"`
	BpmnProcessID        string                 `json:"bpmnProcessId"`
	ProcessKey           int64                  `json:"processKey"`
	Timers               []*Timer               `json:"timers"`
	Version              int64                  `json:"version"`
}

type Timer struct {
	DueDate            string `json:"dueDate"`
	ProcessInstanceKey int64  `json:"processInstanceKey"`
	Repetitions        string `json:"repetitions"`
	StartTime          string `json:"startTime"`
	Status             Status `json:"status"`
}

type Status string

const (
	StatusActive    Status = "ACTIVE"
	StatusCompleted Status = "COMPLETED"
)

var AllStatus = []Status{
	StatusActive,
	StatusCompleted,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusActive, StatusCompleted:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
