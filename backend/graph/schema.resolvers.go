package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"

	"github.com/ducanhpham0312/zeevision/backend/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	todos := []*model.Todo{
		{
			ID: "1",
		},
		{
			ID: "2",
		},
	}

	return todos, nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, input string) (*model.Todo, error) {
	todos := []*model.Todo{
		{
			ID: "1",
		},
		{
			ID: "2",
		},
	}

	for _, todo := range todos {
		if todo.ID == input {
			return todo, nil
		}
	}

	return nil, nil
}

// Names is the resolver for the names field.
func (r *queryResolver) Names(ctx context.Context) ([]string, error) {
	return []string{"name1", "name2"}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
