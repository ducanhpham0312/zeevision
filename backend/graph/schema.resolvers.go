package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"

	"github.com/ducanhpham0312/zeevision/backend/graph/model"
)

// Instances is the resolver for the instances field.
func (r *processResolver) Instances(ctx context.Context, obj *model.Process) ([]*model.Instance, error) {
	return []*model.Instance{}, nil
}

// MessageSubscriptions is the resolver for the messageSubscriptions field.
func (r *processResolver) MessageSubscriptions(ctx context.Context, obj *model.Process) ([]*model.MessageSubscription, error) {
	return []*model.MessageSubscription{}, nil
}

// Timers is the resolver for the timers field.
func (r *processResolver) Timers(ctx context.Context, obj *model.Process) ([]*model.Timer, error) {
	return []*model.Timer{}, nil
}

// Processes is the resolver for the processes field.
func (r *queryResolver) Processes(ctx context.Context) ([]*model.Process, error) {
	return dummyProcesses, nil
}

// Process is the resolver for the process field.
func (r *queryResolver) Process(ctx context.Context, processKey int64) (*model.Process, error) {
	for _, process := range dummyProcesses {
		if process.ProcessKey == processKey {
			return process, nil
		}
	}

	return nil, fmt.Errorf("process with given key %d doesn't exist", processKey)
}

// Process returns ProcessResolver implementation.
func (r *Resolver) Process() ProcessResolver { return &processResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type processResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
